#!/bin/bash

# Script to update repositories for the demo server
# Requires ~/scripts to be checkout of scripts repository

set -e

FORCE_MODE="0"
QUIET_MODE="0"
LOG_FILE="/dev/null"

# Source: https://stackoverflow.com/a/31024664/5155484
while [[ $# > 0 ]]
do
    key="$1"
    while [[ ${key+x} ]]
    do
        case $key in
            --force)
                FORCE_MODE="1"
                ;;
            -q)
                QUIET_MODE="1"
                ;;
            --log-file)
                LOG_FILE="$2"
                shift # option has parameter
                ;;
            *)
                # unknown option
                echo "Unknown option: $key" #1>&2
                exit 10
                ;;
        esac
        # prepare for next option in this key, if any
        [[ "$key" = -? || "$key" == --* ]] && unset key || key="${key/#-?/-}"
    done
    shift # option(s) fully processed, proceed to next input argument
done

debugLog() {
    echo "$1" >> $LOG_FILE
    if [ "${QUIET_MODE}" = "1" ]; then
        return
    fi
    echo "$1"
}

fetchReleaseSeriesFromFile() {
    # version<5.1 do not have the file
    if [ ! -f libraries/classes/Version.php ]; then
        echo "old";
        return;
    fi
    php -r "define('VERSION_SUFFIX', ''); require_once('libraries/classes/Version.php'); echo \PhpMyAdmin\Version::SERIES;"
}

# Directory where repositories are stored
BASEDIR=~/.pma-demo

# Remote URL of repository to checkout
REMOTE=https://github.com/phpmyadmin/phpmyadmin.git
REMOTE_THEMES=https://github.com/phpmyadmin/themes.git

# List of repositories to checkout
REPOS=`awk '/^branches/ {print $3}' ~/scripts/demo/php/versions.ini`
THEMES=`awk '/^themes/ {print $3}' ~/scripts/demo/php/versions.ini`

debugLog "Updating themes"

# Clone / update themes
if [ -d $BASEDIR/themes/.git ] ; then
    cd $BASEDIR/themes
    # Remove local theme changes
    git reset --hard -q
    git pull -q
else
    git clone $REMOTE_THEMES $BASEDIR/themes
fi

# Update all repositories
for REPONAME in $REPOS ; do
    DIRNAME=$BASEDIR/$REPONAME
    mkdir -p $DIRNAME
    debugLog "Working on repository: $REPONAME"

    if [ ! -d $DIRNAME/.git ] ; then
        cd $BASEDIR

        # Clone the repository
        if [ $REPONAME != 'master' ] ; then
            # Use master as reference repository to share objects database
            git clone --reference $BASEDIR/master $REMOTE $REPONAME
        else
            git clone $REMOTE $REPONAME
        fi

        # Checkout correct branch
        cd $DIRNAME
        git checkout ${REPONAME%%-*}

        # Symlink configuration
        FLAVOUR=${REPONAME#*-}
        if [ -f ~/scripts/demo/php/config-$FLAVOUR.inc.php ] ; then
            ln -sf ~/scripts/demo/php/config-$FLAVOUR.inc.php config.inc.php
        else
            ln -sf ~/scripts/demo/php/config.inc.php config.inc.php
        fi
        ln -sf ~/scripts/demo/php/config.*.inc.php .
    else
        # Check for updates
        cd $DIRNAME
        orig_head=$(git log -n 1 --format=format:'%H')
        git checkout -- yarn.lock
        git pull -q
        new_head=$(git log -n 1 --format=format:'%H')

        # Check if there has been an update
        if [ $orig_head = $new_head -a "${FORCE_MODE}" = "0" ] ; then
            debugLog "Skipping repository: $REPONAME, no update found"
            continue
        fi
    fi

    # Create temp dir
    mkdir -p tmp/
    chmod 770 tmp/
    chgrp www-data tmp/

    # TODO: This can be cleaned up and removed when no release exists with ./scripts/
    # Find the console binary
    if [ -d ./scripts/ ]; then
      bin_path=scripts
    elif [ -d ./bin/ ]; then
      bin_path=bin
    else
      bin_path=""
    fi

    # Update composer deps
    if [ -f composer.json ] ; then
        debugLog "Managing php dependencies"
        # Dev modules are needed to use the CLI
        composer update --quiet

        if [ -f libraries/cache/routes.cache.php ] ; then
            rm -f libraries/cache/routes.cache.php
        fi

        if [ -f ./$bin_path/console ]; then
            CLI_VERBOSE="-v"
            if [ "${QUIET_MODE}" = "1" ]; then
                CLI_VERBOSE="-q"
            fi
            # Write new routing cache
            ./$bin_path/console cache:warmup --routing --no-interaction ${CLI_VERBOSE}
            # Write the revision-info.php file
            # Use the CLI or fallback
            # TODO: remove fallback when no demo server is below 5.2
            if [ "$(fetchReleaseSeriesFromFile)" = "5.1" ] || [ "$(fetchReleaseSeriesFromFile)" = "old" ]; then
                debugLog "Using the old revision script"
                ~/scripts/demo/bin/pma-revision-info
            else
                debugLog "Using the new revision script"
                ./$bin_path/console write-revision-info --no-interaction ${CLI_VERBOSE}
            fi
        fi

        # Remove dev vendors
        composer update --quiet --no-dev
    fi

    # Cleanup all themes
    debugLog "Removing previous themes"
    find ./themes/ -maxdepth 1 -type l -exec unlink {} \;

    # Link themes
    for THEME in $THEMES ; do
        if [ ! -e themes/$THEME ] ; then
            debugLog "Linking theme: $THEME"
            ln -s ../../themes/$THEME themes/$THEME
        fi
    done

    if [ -f package.json ] ; then
        debugLog "Managing JS dependencies"
        if [ "${QUIET_MODE}" = "1" ]; then
            # We still redirect output to /dev/null because even with the --silent flag, yarn still gives sass output such as
            # $ sass themes/pmahomme/scss:themes/pmahomme/css themes/original/scss:themes/original/css themes/metro/scss:themes/metro/css
            # Use a subshell method to absorb all the output because "Browserslist: caniuse-lite is outdated." misbehaves
            (yarn install --production --frozen-lockfile --non-interactive --silent) >/dev/null 2>&1
        else
            yarn install --production --frozen-lockfile --non-interactive --silent
        fi
        # They waste too much space, clear them out
        rm -rf ./node_modules
    fi

    # Generate locales
    if [ -f ./$bin_path/generate-mo ] ; then
        ./$bin_path/generate-mo --quiet
    fi

    # Calculate locales percentages to get warnings for missing translations
    if [ -f ./$bin_path/remove-incomplete-mo ] ; then
        ./$bin_path/remove-incomplete-mo 0
    fi
done

debugLog "Deleting stale directories"

# Delete stale directories
find $BASEDIR -maxdepth 1 -mindepth 1 -type d | while read DIRNAME ; do
    REPO=${DIRNAME##*/}
    if [ $REPO = themes ] ; then
        continue
    fi
    for TESTREPO in $REPOS ; do
        if [ $TESTREPO = $REPO ] ; then
            continue 2
        fi
    done
    debugLog "Deleting stale repository $DIRNAME"
    rm -rf "$DIRNAME"
done

debugLog "All done"
