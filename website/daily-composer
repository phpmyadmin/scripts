#!/bin/sh
# Daily executed script to push changes to Packgagist
#  - updates all maintained branches
#  - updates all tags
#  - generates README to describe that this is generated repo

# Fail on error or undefined variable
set -e
set -u

# Working directory
DIR=~/composer

# Branches we process
BRANCHES="QA_5_2 QA_4_9 master"

generate_readme() {
    cat > README.rst <<EOT
phpMyAdmin for Composer
=======================

This is automatically generated repository to allow installation of phpMyAdmin
using composer.

You can find phpMyAdmin repository here:

https://github.com/phpmyadmin/phpmyadmin/

This repository is updated daily.
EOT
    if ! git diff --quiet -- README.rst ; then
        git commit -m 'Updated README' README.rst
    fi
}

generate_mo() {
    rm -rf locale
    # TODO: This can be cleaned up and removed when no release exists with ./scripts/
    if [ -f ./scripts/generate-mo ]; then
      ./scripts/generate-mo
    else
      ./bin/generate-mo
    fi
    git add -f locale
    if ! git diff --quiet --cached ; then
        git commit -m 'Update mo files'
    fi
}

generate_css() {
    # You can not use --production because it creates the error "[BABEL]: Cannot find module 'browserslist'"
    yarn install --frozen-lockfile --non-interactive --silent
    if [ -d ./public/ ]; then
        git add --force public/themes/*/css/*.css || echo "No css file found, not adding to git repository"
        git add --force public/themes/*/css/*.css.map || echo "No css.map files found, not adding to git repository"
    else
        git add --force themes/*/css/*.css || echo "No css file found, not adding to git repository"
        git add --force themes/*/css/*.css.map || echo "No css.map files found, not adding to git repository"
    fi
    if ! git diff --quiet --cached ; then
        git commit -m 'Update generated CSS files'
    fi
}

generate_js() {
    # You can not use --production because it creates the error "[BABEL]: Cannot find module 'browserslist'"
    yarn install --frozen-lockfile --non-interactive --silent
    git add --force js/dist/ || echo "No JS files found, not adding to git repository"
    if ! git diff --quiet --cached ; then
        git commit -m 'Update generated JS files'
    fi
}

# Keep in sync with phpmyadmin/phpmyadmin:scripts/create-release.sh
fetchReleaseFromFile() {
    php -r "define('VERSION_SUFFIX', ''); require_once('libraries/classes/Version.php'); echo \PhpMyAdmin\Version::VERSION;"
}

set_version_in_composer() {
    if [ ! -f libraries/classes/Version.php ]; then
        echo "The version file does not exist for this version"
        return
    fi

    # The reason the version is added to the composer.json file is because of:
    # - https://github.com/phpmyadmin/phpmyadmin/issues/17570
    # - https://github.com/Roave/SecurityAdvisories/issues/76

    echo "Detected version: $(fetchReleaseFromFile)"
    composer config version "$(fetchReleaseFromFile)"
    echo "Saved version: $(composer config version)"
    git add composer.json
    if ! git diff --quiet --cached ; then
        git commit -m 'Set version in composer.json' -m "Version: $(composer config version)"
    fi
}

reset_not_allowed_to_change_source_files() {
    # Source: https://stackoverflow.com/a/68019875/5155484
    if [ -d ./public/ ]; then
        CHANGED_FILES="$(git diff phpmyadmin/$branch..$newbranch --name-only -- './*' ':!README.rst' ':!public/js/dist/*.js' ':!public/js/dist/*.js.map' ':!locale/*.mo' ':!public/themes/*.css' ':!public/themes/*.css.map')"
    else
        CHANGED_FILES="$(git diff phpmyadmin/$branch..$newbranch --name-only -- './*' ':!README.rst' ':!js/dist/*.js' ':!js/dist/*.js.map' ':!locale/*.mo' ':!themes/*.css' ':!themes/*.css.map')"
    fi

    if [ -z "$CHANGED_FILES" ]; then
        echo "No files did change"
        return
    fi

    echo "Files changed: $CHANGED_FILES"

    echo "$CHANGED_FILES" | xargs git checkout phpmyadmin/$branch --theirs
    echo "$CHANGED_FILES" | xargs git add --force
    unset CHANGED_FILES

    if ! git diff --quiet --cached ; then
        git commit -m 'Reset changed source files'
    fi
}

# Ensure we have working dir
if [ ! -d "$DIR" ] ; then
    git clone git@github.com:phpmyadmin/composer.git "$DIR"
    cd "$DIR"
    git remote add --no-tags phpmyadmin https://github.com/phpmyadmin/phpmyadmin.git
else
    cd "$DIR"
fi

# Update phpmyadmin remote
git remote update phpmyadmin
# Fetch tags (we don't want them as tags)
git fetch phpmyadmin '+refs/tags/*:refs/remotes/phpmyadmin/tags/*'

# Destroy local changes
git reset --hard

# Process branches
for branch in $BRANCHES ; do
    if [ $branch = master ] ; then
        newbranch=master
    else
        newbranch=`echo $branch | sed -e 's/QA_//' -e 's/_/./g' `.x
    fi
    echo "Working on $newbranch ($branch)"

    # Ensure we have the branch
    if git rev-parse --verify --quiet $newbranch ; then
        git checkout $newbranch
        if [ `git log --oneline ..phpmyadmin/$branch | wc -l` -eq 0 ] ; then
            continue
        fi
        git merge --no-edit --strategy=recursive --strategy-option=theirs phpmyadmin/$branch
    else
        git checkout -b $newbranch phpmyadmin/$branch
    fi

    # Destroy any possible changes
    git reset --hard
    # Force an update just in case
    git pull --ff

    # Reset content that could have changed by mistake
    reset_not_allowed_to_change_source_files

    # Update content
    generate_readme
    generate_mo
    generate_css
    generate_js
    set_version_in_composer

    # Push
    git push origin $newbranch
done

# Process tags

# We don't take tags prior to 4.7.0, since that's when we started distributing through Composer.
# This grep string matches 4.7-9 or anything higher than 5.
# We also do not match on any release candidate or development release.
for tag in $(git branch -r | grep 'phpmyadmin/tags/\(RELEASE_[4]_[7-9]_[0-9]\+\(_[0-9]\)\?$\)\|\(RELEASE_\([^1-4]\|[0-9]\{2,\}\)\_[0-9]\+_[0-9]\+\(_[0-9]\)\?$\)') ; do
    newtag=`echo $tag | sed -e 's@.*RELEASE_@@' -e 's/_/./g'`
    if git rev-parse --verify --quiet $newtag ; then
        continue
    fi
    echo "Working on $newtag ($tag)"

    # Create temporary branch
    git checkout -b tmp $tag

    # Update content
    generate_readme
    generate_mo
    generate_css
    generate_js
    set_version_in_composer

    # Create tag
    git tag -a -m "Composer tag for $tag" $newtag

    # Remove temporary branch
    git checkout master
    git branch -D tmp

    # Push the tag
    git push origin $newtag
done
